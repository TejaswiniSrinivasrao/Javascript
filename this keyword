What is this keyword?

In JavaScript, the this keyword refers to an object.

Which object depends on how this is being invoked (used or called).

The this keyword refers to different objects depending on how it is used:

In an object method, this refers to the object.
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.
Methods like call(), apply(), and bind() can refer this to any object.

case1:
______

const person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};// Here person is the object in which this is taken as person because fullname function is in person object so here output will be John Doe.

//When used in an object method, this refers to the object.

Case 2:
________

let x = this;
 
 When used alone, this refers to the global object.

Because this is running in the global scope.

*** In a browser window the global object is [object Window]

*** In strict mode, when used alone, this also refers to the global object:

function myFunction() {
  return this;
} 

*** In a function, the global object is the default binding for this.

"use strict";
function myFunction() {
  return this;
}

*** JavaScript strict mode does not allow default binding.

*** So, when used in a function, in strict mode, this is undefined.

Case 3:
_______

Event Handlers:

In HTML event handlers, this refers to the HTML element that received the event:

<button onclick="this.style.display='none'">
  Click to Remove Me!
</button>

Case 4:
______
The call() and apply() methods are predefined JavaScript methods.

They can both be used to call an object method with another object as arguments

Call:
_____
const person1 = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}

const person2 = {
  firstName:"John",
  lastName: "Doe",
}

// Return "John Doe":
person1.fullName.call(person2);

Apply:
_______

const person = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}

const person1 = {
  firstName: "Mary",
  lastName: "Doe"
}

// This will return "Mary Doe Oslo Norway":
person.fullName.apply(person1, ["Oslo", "Norway"]);

**** The call() method takes arguments separately.

**** The apply() method takes arguments as an array.

Case 5:
_______

With the bind() method, an object can borrow a method from another object.
The member object borrows the fullname method from the person object:

const person = {
  firstName:"John",
  lastName: "Doe",
  fullName: function () {
    return this.firstName + " " + this.lastName;
  }
}

const member = {
  firstName:"Hege",
  lastName: "Nilsen",
}

let fullName = person.fullName.bind(member);

______________________________________________________________________________
To determine which object this refers to; use the following precedence of order.

Precedence	Object
1	bind()
2	apply() and call()
3	Object method
4	Global scope


Examples:
__________

1. const person ={
name :"Teja",
sayName: function(){
  console.log(this.name);
  }
 } 
 
 person.sayName(); // returns Teja because here this is treated as object person.
 
 2. const localSayName = person.sayName;
    localSayName(); // returns undefined because it returns the global context in place of person object which is undefined
    
  3. const boundSayName = person.sayName.bind(person);
    boundSayName();// returns Teja because bind method references to the person object. Here we are expilictly telling to use this object so 
    here bind method tells this refers to person so it takes the person object instead of global object.
    
   4. Arrow functions change behaviour of this keyword:
   const person ={
name :"Teja",
sayName: () =>{
  console.log(this.name);
  }
 } 
 person.sayName(); // returns undefined becuse when using arrow functions the meaning of this doesnot change no matter who is calling the function it will
 take the global context . This keyword basically dictates whats it at time of definition so it is taking global context which gives undefined.
   

